<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat frontend</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

    <style>
        /* Custom scrollbar styles */
        .custom-scrollbar {
            overflow-y: auto; 
            padding-right: 10px; /* Add padding to create margin */
            width: 100%;
        }
        .custom-scrollbar::-webkit-scrollbar {
            width: 10px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
            /* background: #f1f1f1; */
            margin: 2px; /* Add margin to scrollbar track */
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: #555;
            border-radius: 4px;
            border: 1px solid #f1f1f160;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background-color: #888;
        }

        .no-scrollbar {
            overflow-y: auto; 
        }
        .no-scrollbar::-webkit-scrollbar {
            display: none;
        }
        /* Hide scrollbar for IE, Edge, and Firefox */
        .no-scrollbar {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        .shadow-top { 
            box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1), 0 -10px 15px -3px rgba(0, 0, 0, 0.1); 
        }
        .shadow-bottom {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .shadow-inner-40	{
            box-shadow: inset 0 0 40px rgb(0 0 0 / 0.1);
        }
        .clearfix::after {
            content: "";
            display: table;
            clear: both;
        }   
        .max-h-80vh {
            max-height: 80vh;
        }
    </style>
    <link href="css/dots.css" rel="stylesheet">
</head>


<body class="bg-gray-900">
    <iframe id="external-website" class="fixed left-0 top-0 w-full h-full" src="<%= backdropURL %>" frameborder="0"></iframe>
    <div id='chatContainer' class="hidden max-w-xl flex flex-col min-h-screen bg-gray-700 fixed top-0 right-0">
        <div class="text-white text-right p-4 shadow-bottom">
            <button id="closeChatBtn" class="bg-blue-500 text-white px-4 py-2 rounded-full shadow-lg">Close</button>
        </div>
        
        <div class="flex-grow flex items-end">
            <div id="chat" class="no-scrollbar w-full rounded-lg text-white max-h-80vh px-4">
                <!-- Chat messages will appear here -->
            </div>
        </div>

        <div class="flex px-4 h-20 py-4 shadow-top">
            <input id="userInput" type="text" class="flex-grow rounded-l-lg p-2 focus:outline-none" placeholder="Ask a question">
            <button id="sendButton" class="bg-blue-700 text-white rounded-r-lg p-2 hover:bg-blue-600 hover:border hover:border-white focus:outline-none">Send</button>
        </div>
    </div>
    <button id="toggleChatBtn" class="fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-2 mr-4 rounded-full shadow-lg">Open Chat</button>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const chat = document.getElementById('chat');
        const userInput = document.getElementById('userInput');
        const sendButton = document.getElementById('sendButton');
        const toggleChatBtn = document.getElementById('toggleChatBtn');
        const chatContainer = document.getElementById('chatContainer');
        const closeChatBtn = document.getElementById('closeChatBtn');
        const socket = io();

        toggleChatBtn.addEventListener('click', () => {
            chatContainer.classList.toggle('hidden');
            toggleChatBtn.classList.toggle('hidden');
        });

        closeChatBtn.addEventListener('click', () => {
            chatContainer.classList.toggle('hidden');
            toggleChatBtn.classList.toggle('hidden');
        });

        function disableSend(disable)
        {
            userInput.disabled = disable;
            sendButton.disabled = disable;
        }

        socket.on('server message', (result) => {
            disableSend(false)
            let lastMsgElem = getLastMessage()

            if(!lastMsgElem || !isLoadingAssistanMessage(lastMsgElem)) {
                lastMsgElem = addMessage('Assistant', '');
            }
            if ('response' in result) {
                if('sources' in result) {
                    addMessageContent(lastMsgElem, result.response, result.sources)
                } else {
                    addMessageContent(lastMsgElem, result.response)
                }
            } else if ('error' in result) {
                const jsonErr = JSON.stringify(result.error);
                addMessageContent(lastMsgElem, jsonErr)
            } else {
                addMessageContent(lastMsgElem, 'error')
            }
        });

        sendButton.addEventListener('click', () => {
                
            const query = userInput.value.trim();
    
            if (query) {
                addMessage('User', query);
                const lastMessageElem = addLoadingAssistantMessage()
                userInput.value = ''
                disableSend(true)

                socket.emit('client message', query);
            }   
        });
    
        userInput.addEventListener('keypress', function(event) { 
            if (event.key === 'Enter') { 
                sendButton.click()
            }
        });
    
        function addMessageContent(messageElement, message, sources)
        {
            var references = '';
            if(sources !== undefined) {
                sources.forEach(function(source) {             
                    references += `<div class='max-w-28 border rounded-lg p-1 text-xs float-left mr-1 mt-1'>
                                        <a href='${source.metadata.source}' class='block truncate cursor-pointer'>
                                            ${source.metadata.source}
                                        </a>
                                    </div>`                                    
                });
            }
            messageElement.innerHTML = `<p>${message}</p><div class='clear-both'>${references}</div>`;
        }
    
        function createMessage(sender, message, sources)
        {
            const messageElement = document.createElement('div');
            messageElement.classList.add('p-2', 'rounded-lg', 'max-w-[90%]');
            if(sender === 'User') {
                messageElement.classList.add('bg-blue-900', 'user-message', 'float-right');
            } else {
                messageElement.classList.add('bg-gray-700', 'assistant-message', 'float-left');
            }
            
            addMessageContent(messageElement, message, sources)
            return messageElement
        }
    
        function getLastMessage()
        {
            const lastMessageContainer = chat.lastElementChild;
            const lastMessageElement = lastMessageContainer ? lastMessageContainer.querySelector('div') : null;
            return lastMessageElement
        }

        function isAssistantMessage(messageElement)
        {
            return messageElement.classList.contains('assistant-message')
        }

        function isLoadingMessage(messageElement)
        {
            const hasLoadingDiv = messageElement.querySelector('div.dot') !== null;
            return hasLoadingDiv
        }

        function isLoadingAssistanMessage(messageElement)
        {
            
            if(messageElement && isAssistantMessage(messageElement) && isLoadingMessage(messageElement) ) {
                return true
            }
        }

        function addMessage(sender, message, sources = undefined) {
            
            const messageContainer = document.createElement('div');
            messageContainer.classList.add('mb-2', 'w-full', 'clearfix');
            const messageElement = createMessage(sender, message, sources)
            messageContainer.appendChild(messageElement);
            chat.appendChild(messageContainer);
            chat.scrollIntoView({ behavior: 'smooth' })
            chat.scrollTop = chat.scrollHeight;
    
            return getLastMessage()
        }
    
        function addLoadingAssistantMessage()
        {
            const loading = '<div class="dot float-left"></div> \
                            <div class="dot float-left"></div> \
                            <div class="dot float-left"></div><div class="clear-both"/>'
            return addMessage('Assistant', loading);
        }
    </script>
</body>
</html>
